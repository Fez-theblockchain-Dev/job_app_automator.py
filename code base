import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Set your login credentials, job search preferences, and ChromeDriver path
email = 'user email here'
password = 'put your password here'
job_title = 'Software Engineer (New Grad/Intern)'
minimum_pay = 29
chrome_driver_path = '/path/to/chromedriver'

# Initialize the Chrome webdriver
driver = webdriver.Chrome(service=Service(chrome_driver_path))

# Function to log in to your Dice.com account
def login(email, password):
    driver.get('https://www.dice.com/dashboard/login')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'email')))
    email_input = driver.find_element(By.NAME, 'email')
    password_input = driver.find_element(By.NAME, 'password')

    email_input.send_keys(email)
    password_input.send_keys(password)
    password_input.send_keys(Keys.RETURN)

# Function to search for jobs
def search_jobs():
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'typeaheadInput')))
    search_input = driver.find_element(By.ID, 'typeaheadInput')
    search_input.clear()
    search_input.send_keys(job_title)

    # Try selecting the remote filter
    try:
        remote_checkbox = driver.find_element(By.ID, 'remote-jobs-checkbox')
        if not remote_checkbox.is_selected():
            remote_checkbox.click()
    except Exception as e:
        print(f"Remote checkbox not found: {e}")

    search_input.send_keys(Keys.RETURN)

# Function to apply for jobs
def apply_jobs():
    job_listings = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '.card-content')))
    for job in job_listings:
        try:
            salary_text = job.find_element(By.CSS_SELECTOR, '.salary').text.strip('$').split('-')[0]
            pay = float(salary_text.replace(',', '').replace(' ', ''))
            if pay >= minimum_pay:
                job.find_element(By.CSS_SELECTOR, '.job-apply-btn').click()
                time.sleep(1)
        except Exception as e:
            print(f"Error processing job: {e}")
            continue

# Log in, search for jobs, and apply
login(email, password)
search_jobs()
apply_jobs()

# Close the browser window
driver.quit()
